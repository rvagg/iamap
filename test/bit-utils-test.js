// Copyright Rod Vagg; Licensed under the Apache License, Version 2.0, see README.md for more information

const { test } = require('tap')
const { mask, bitmapHas, index, setBit } = require('../bit-utils')

test('mask', (t) => {
  t.strictEqual(mask([0b11111111], 0, 5), 0b11111)
  t.strictEqual(mask([0b10101010], 0, 5), 0b1010)
  t.strictEqual(mask([0b00000001], 0, 5), 0b1)
  t.strictEqual(mask([0b00010000], 0, 5), 0b10000)
  t.strictEqual(mask([0b1001000010000100], 0, 9), 0b010000100)
  t.strictEqual(mask([0b1010101010101010], 0, 9), 0b010101010)
  t.strictEqual(mask([ (3 << 4) | 2 ], 0, 4), 2)
  t.strictEqual(mask([ (3 << 4) | 2 ], 1, 4), 3)
  t.strictEqual(mask([ (3 << 4) | 2, (5 << 4) | 4 ], 2, 4), 4)
  t.strictEqual(mask([ (3 << 4) | 2, (5 << 4) | 4 ], 3, 4), 5)
  t.strictEqual(mask([ (7 << 3) | 6 ], 0, 3), 6)
  t.strictEqual(mask([ (7 << 3) | 6 ], 1, 3), 7)
  t.strictEqual(mask([ 0b11000000, 0b1 ], 2, 3), 7) // span two bytes, 2 bits from first, 1 from second
  t.done()
})

test('bitmapHas', (t) => {
  t.ok(!bitmapHas(Buffer.from([ 0b0 ]), 0))
  t.ok(!bitmapHas(Buffer.from([ 0b0 ]), 1))
  t.ok(bitmapHas(Buffer.from([ 0b1 ]), 0))
  t.ok(!bitmapHas(Buffer.from([ 0b1 ]), 1))
  t.ok(!bitmapHas(Buffer.from([ 0b101010 ]), 2))
  t.ok(bitmapHas(Buffer.from([ 0b101010 ]), 3))
  t.ok(!bitmapHas(Buffer.from([ 0b101010 ]), 4))
  t.ok(bitmapHas(Buffer.from([ 0b101010 ]), 5))
  t.ok(bitmapHas(Buffer.from([ 0b100000 ]), 5))
  t.ok(bitmapHas(Buffer.from([ 0b0100000 ]), 5))
  t.ok(bitmapHas(Buffer.from([ 0b00100000 ]), 5))
  t.done()
})

test('index', (t) => {
  t.strictEqual(index(Buffer.from([ 0b111111 ]), 0), 0)
  t.strictEqual(index(Buffer.from([ 0b111111 ]), 1), 1)
  t.strictEqual(index(Buffer.from([ 0b111111 ]), 2), 2)
  t.strictEqual(index(Buffer.from([ 0b111111 ]), 4), 4)
  t.strictEqual(index(Buffer.from([ 0b111100 ]), 2), 0)
  t.strictEqual(index(Buffer.from([ 0b111101 ]), 4), 3)
  t.strictEqual(index(Buffer.from([ 0b111001 ]), 4), 2)
  t.strictEqual(index(Buffer.from([ 0b111000 ]), 4), 1)
  t.strictEqual(index(Buffer.from([ 0b110000 ]), 4), 0)
  // new node, no bitmask, insertion at the start
  t.strictEqual(index(Buffer.from([ 0b000000 ]), 0), 0)
  t.strictEqual(index(Buffer.from([ 0b000000 ]), 1), 0)
  t.strictEqual(index(Buffer.from([ 0b000000 ]), 2), 0)
  t.strictEqual(index(Buffer.from([ 0b000000 ]), 3), 0)
  t.done()
})

test('setBit', (t) => {
  t.strictEqual(setBit(Buffer.from([ 0 ]), 0, 1).toString('hex'), Buffer.from([ 0b00000001 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0 ]), 1, 1).toString('hex'), Buffer.from([ 0b00000010 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0 ]), 7, 1).toString('hex'), Buffer.from([ 0b10000000 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11111111 ]), 0, 1).toString('hex'), Buffer.from([ 0b11111111 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11111111 ]), 7, 1).toString('hex'), Buffer.from([ 0b11111111 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b01010101 ]), 1, 1).toString('hex'), Buffer.from([ 0b01010111 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b01010101 ]), 7, 1).toString('hex'), Buffer.from([ 0b11010101 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11111111 ]), 0, 0).toString('hex'), Buffer.from([ 0b11111110 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11111111 ]), 1, 0).toString('hex'), Buffer.from([ 0b11111101 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11111111 ]), 7, 0).toString('hex'), Buffer.from([ 0b01111111 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0, 0b11111111 ]), 8 + 0, 1).toString('hex'), Buffer.from([ 0, 0b11111111 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0, 0b11111111 ]), 8 + 7, 1).toString('hex'), Buffer.from([ 0, 0b11111111 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0, 0b01010101 ]), 8 + 1, 1).toString('hex'), Buffer.from([ 0, 0b01010111 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0, 0b01010101 ]), 8 + 7, 1).toString('hex'), Buffer.from([ 0, 0b11010101 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0, 0b11111111 ]), 8 + 0, 0).toString('hex'), Buffer.from([ 0, 0b11111110 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0, 0b11111111 ]), 8 + 1, 0).toString('hex'), Buffer.from([ 0, 0b11111101 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0, 0b11111111 ]), 8 + 7, 0).toString('hex'), Buffer.from([ 0, 0b01111111 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0 ]), 0, 0).toString('hex'), Buffer.from([ 0b00000000 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0 ]), 7, 0).toString('hex'), Buffer.from([ 0b00000000 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b01010101 ]), 0, 0).toString('hex'), Buffer.from([ 0b01010100 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b01010101 ]), 6, 0).toString('hex'), Buffer.from([ 0b00010101 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11000010, 0b11010010, 0b01001010, 0b0000001 ]), 0, 0).toString('hex'), Buffer.from([ 0b11000010, 0b11010010, 0b01001010, 0b0000001 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11000010, 0b11010010, 0b01001010, 0b0000001 ]), 0, 1).toString('hex'), Buffer.from([ 0b11000011, 0b11010010, 0b01001010, 0b0000001 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11000010, 0b11010010, 0b01001010, 0b0000001 ]), 12, 0).toString('hex'), Buffer.from([ 0b11000010, 0b11000010, 0b01001010, 0b0000001 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11000010, 0b11010010, 0b01001010, 0b0000001 ]), 12, 1).toString('hex'), Buffer.from([ 0b11000010, 0b11010010, 0b01001010, 0b0000001 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11000010, 0b11010010, 0b01001010, 0b0000001 ]), 24, 0).toString('hex'), Buffer.from([ 0b11000010, 0b11010010, 0b01001010, 0b0000000 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0b11000010, 0b11010010, 0b01001010, 0b0000001 ]), 24, 1).toString('hex'), Buffer.from([ 0b11000010, 0b11010010, 0b01001010, 0b0000001 ]).toString('hex'))
  t.strictEqual(setBit(Buffer.from([ 0, 0, 0, 0 ]), 31, 1).toString('hex'), Buffer.from([ 0, 0, 0, -0b10000000 ]).toString('hex'))
  t.done()
})
